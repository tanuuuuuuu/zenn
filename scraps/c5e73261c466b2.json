{
  "title": "R メモ",
  "closed": false,
  "archived": false,
  "created_at": "2022-12-30",
  "comments": [
    {
      "author": "tanuhack",
      "created_at": "2022-12-30",
      "body_markdown": "# Base R\n## 1. スカラー\n\n## 2. ベクトル\n\n## 3. 演算子\n### 3.1. 代入演算子\n| 演算子 | 意味 |\n|---|---|\n| `<-`, `=` | 代入 |\n| `<<-` | 永続代入（グローバル変数に代入） |\n\n代入は、`<-` でも `=` でも良い。ただし、慣例的に `<-` が使われることが多い。\n\n```r\n# 変数xに3を代入\nx <- 3\n\n# 関数の中でグローバル変数yに10を代入\nf <- function() {\n  y <<- 10\n}\n```\n\n### 3.2. 算術演算子\n| 演算子 | 意味 |\n|---|---|\n| `+` | 加算 |\n| `-` | 減算 |\n| `*` | 乗算 |\n| `/` | 除算 |\n| `%/%` | 商 |\n| `%%` | 剰余 |\n| `^` | べき乗 |\n\n```r\nx <- 10\ny <- c(10, 20, 30, 40, 50)\nz <- c(2, 4, 6, 4, 2)\n\n# 加算\nx + 3 # 13\ny + 5 # 15 25 35 45 55\ny + z # 12 24 36 44 52\n\n# 減算\nx - 3 # 7\ny - 5 # 5 15 25 35 45\ny - z # 8 16 24 36 48\n\n# 乗算\nx * 3 # 30\ny * 5 # 50 100 150 200 250\ny * z # 20 80 180 160 100\n\n# 除算\nx / 3 # 3.333333\ny / 5 # 2 4 6 8 10\ny / z # 5 5 5 10 25\n\n# 商\nx %/% 3 # 3\ny %/% 5 # 0 0 0 0 0\ny %/% z # 0 0 0 0 0\n\n# 剰余\nx %% 3 # 1\ny %% 5 # 1 2 3 4 0\ny %% z # 1 2 3 4 5\n\n# べき乗\nx ^ 3 # 1000\ny ^ 5 # 100000 3200000 24300000 102400000 312500000\ny ^ z # 100 16000 7290000 2560000 2500\n```\n\n### 3.3. 比較演算子\n| 演算子 | 意味 |\n|---|---|\n| `==` | 等号 |\n| `!=` | 否定等号 |\n| `>=` | 以上 |\n| `<=` | 以下 |\n| `>` | 超過 |\n| `<` | 未満 |\n\n```r\nx <- 5\ny <- c(1, 2, 3, 4, 5)\nz <- c(3, 0, 1, 4, 9)\n\n# 等号\nx == 3 # FALSE\ny == 3 # FALSE FALSE TRUE FALSE FALSE\ny == z # FALSE FALSE FALSE TRUE FALSE\n\n# 否定等号\nx != 3 # TRUE\ny != 3 # TRUE TRUE FALSE TRUE TRUE\ny != z # TRUE TRUE TRUE FALSE TRUE\n\n# 以上\nx >= 3 # TRUE\ny >= 3 # FALSE FALSE TRUE TRUE TRUE\ny >= z # FALSE TRUE TRUE TRUE FALSE\n\n# 以下\nx <= 3 # FALSE\ny <= 3 # TRUE TRUE TRUE FALSE FALSE\ny <= z # TRUE FALSE FALSE TRUE TRUE\n\n# 超過\nx > 3 # TRUE\ny > 3 # FALSE FALSE FALSE TRUE TRUE\ny > z # FALSE TRUE TRUE FALSE FALSE\n\n# 未満\nx < 3 # FALSE\ny < 3 # TRUE TRUE FALSE FALSE FALSE\ny < z # TRUE FALSE FALSE FALSE TRUE\n```\n\n### 3.4. 論理演算子\n| 演算子 | 意味 |\n|---|---|\n| `&` | 論理積 |\n| `\\|` | 論理和 |\n| `!` | 否定 |\n| `xor` | 排他的論理和 |\n| `any` | 要素に 1 つでも `TRUE` が存在すると `TRUE`、全て `FALSE` だと `FALSE` を返す |\n| `all` | 要素に 1 つでも `FALSE` が存在すると `FALSE`、全て `TRUE` だと `TRUE` を返す |\n\n```r\nc1 = c(T, F, F, T, F)\nc2 = c(T, T, F, T, T)\n\n# 論理積\nc1 & c2 # TRUE FALSE FALSE TRUE FALSE\n\n# 論理和\nc1 | c2 # TRUE TRUE FALSE TRUE TRUE\n\n# 否定\n!c1 # FALSE TRUE TRUE FALSE TRUE\n!(c1 & c2) # FALSE TRUE TRUE FALSE TRUE\n\n# 排他的論理和\nxor(c1, c2) # FALSE TRUE FALSE FALSE TRUE\n\n# ANY\nany(c1) # TRUE\n\n# ALL\nall(c1) # FALSE\n```\n\n## 4. 関数\n### 4.1. 組み込み関数\n- `levels()` : ordered 型の数値を取得\n- `typeof()` : データ型を取得\n\n### 4.2. ユーザー定義関数（UDF）",
      "body_updated_at": "2023-01-04"
    },
    {
      "author": "tanuhack",
      "created_at": "2022-12-30",
      "body_markdown": "# RStudio\n\n## ショートカットキー（Mac）\n- コメントアウト : `Command` + `Shift` + `C` --> `Command` + `/` に変更\n- 代入演算子 `<-` : `Option` + `-`\n- パイプ演算子 `%>%` : `Command` + `Shift` + `M`\n\n## Rprofile\nR が起動したときに読み込まれるファイル。よく使うパッケージを記述しておくと便利。\n\n```plain: .Rprofile\nlibrary(stats)\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(patchwork)\nlibrary(lubridate)\n```\n\n## 自動コードフォーマット\n`Command` + `S` でコードを保存したときに、[Tidyverse スタイルガイド](https://style.tidyverse.org/)をファイル全体に適用する。これを [styler](https://styler.r-lib.org/) パッケージと [shrtcts](https://github.com/gadenbuie/shrtcts) パッケージを組み合わせて実現する。\n\n```r:\n# stylerパッケージのインストール\ninstall.packages(\"styler\")\n\n# shrtctsパッケージのインストール\n# install.packages(\"remotes\")\nremotes::install_github(\"gadenbuie/shrtcts\")\n```\n\nカスタムショートカットキーの定義ファイルを `shrtcts::edit_shortcuts()` コマンドで開き、以下のコードを貼り付ける\n```r:.shrtcts.R\n#' Format on Save\n#'\n#' @description\n#'   Format Document with styler Package and Save Document.\n#' @interactive\n#' @shortcut Cmd+S\nfunction() {\n  # format only .R and .Rmd files, but save all file types\n  file_type <- tools::file_ext(rstudioapi::getActiveDocumentContext()$path)\n  \n  if (file_type %in% c(\"R\", \"Rmd\", \"qmd\")) {\n    styler:::style_active_file() |>\n      capture.output() |>\n      invisible()\n  }\n  \n  rstudioapi::documentSave() |>\n    capture.output() |>\n    invisible()\n}\n```\n\nカスタムショートカットキーの設定を `shrtcts::add_rstudio_shortcuts(set_keyboard_shortcuts = TRUE)` コマンドで有効にし、RStudio を再起動する。\n\n> 参考\n> [Auto-format R code in RStudio](https://stackoverflow.com/questions/15703553/auto-format-r-code-in-rstudio)",
      "body_updated_at": "2023-01-06"
    },
    {
      "author": "tanuhack",
      "created_at": "2023-01-01",
      "body_markdown": "# tidyverse\n![](https://storage.googleapis.com/zenn-user-upload/2002c38ae3c2-20230102.png)\n\n[tidyverse](https://www.tidyverse.org/) は、R で **モダンなデータ分析** をするためのパッケージの集まり。データの読み込み、抽出、前処理、可視化を効率的に行うことができる。\n\n```r\n# パッケージのインストール\ninstall.packages(\"tidyverse\")\n\n# パッケージの読み込み\nlibrary(tidyverse)\n```\n\n| パッケージ | 説明 |\n|---|---|\n| tibble | `data.frame` の進化版 |\n| dplyr | `tibble` の操作 |\n| tidyr |  `tidy data` に変換 |\n| ggplot2 |  可視化 |\n| stringr |  文字列処理 |\n| readr |  データ I/O |\n| forcats |  ファクター処理 |\n| purrr |  反復処理 |\n\n## tibble\n[tibble](https://tibble.tidyverse.org/index.html) は、Base R の伝統的な `data.frame` を現代的に再構築したもの。tidyverse は `data.frame` ではなく `tibble` を使用することが前提。\n\n`tibble` を作成する方法として、以下の方法が存在する。\n- [`tibble::tibble()`](https://tibble.tidyverse.org/reference/tibble.html) : 列ベクトルから `tibble` を作成\n- [`tibble::tribble()`](https://tibble.tidyverse.org/reference/tribble.html) : 行単位で定義して `tibble` を作成\n- [`tibble::as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html) : 既存のオブジェクトから `tibble` を作成\n\n```r\n# 1. tibble::tibble()\ntibble(idx = 1:3, lang = c(\"R\", \"Python\", \"SQL\"))\n\n# 2. tibble::tribble()\ntribble(\n  ~idx, ~lang,\n  1, \"R\",\n  2, \"Python\",\n  3, \"SQL\"\n)\n\n# 3. tibble::as_tibble()\ndata.frame(idx = 1:3, lang = c(\"R\", \"Python\", \"SQL\")) %>%\n  as_tibble()\n```\n\n```r: 出力\n# # A tibble: 3 × 2\n#     idx lang  \n#   <int> <chr> \n# 1     1 R     \n# 2     2 Python\n# 3     3 SQL   \n```\n\n## dplyr\n[dplyr](https://dplyr.tidyverse.org/index.html) は、`tibble` を様々な角度から操作するパッケージ。\n\n### 行の抽出\n行の抽出は、[`dplyr::filter()`](https://dplyr.tidyverse.org/reference/filter.html) を使用する。\n\n```r\niris %>%\n  as_tibble() %>% \n  filter(Species == \"setosa\")\n\n# # A tibble: 50 × 5\n#    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n#  1          5.1         3.5          1.4         0.2 setosa \n#  2          4.9         3            1.4         0.2 setosa \n#  3          4.7         3.2          1.3         0.2 setosa \n#  4          4.6         3.1          1.5         0.2 setosa \n#  5          5           3.6          1.4         0.2 setosa \n#  6          5.4         3.9          1.7         0.4 setosa \n#  7          4.6         3.4          1.4         0.3 setosa \n#  8          5           3.4          1.5         0.2 setosa \n#  9          4.4         2.9          1.4         0.2 setosa \n# 10          4.9         3.1          1.5         0.1 setosa \n# # … with 40 more rows\n```\n\n複数条件（AND）は、`,` で区切ることもできる。\n```r\n# カンマ\niris %>%\n  as_tibble() %>% \n  filter(Species == \"setosa\", Petal.Length > 1.6)\n\n# # 論理演算子&\n# iris %>%\n#   as_tibble() %>% \n#   filter(Species == \"setosa\" & Petal.Length > 1.6)\n```\n```r:出力\n# # A tibble: 6 × 5\n#   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n# 1          5.4         3.9          1.7         0.4 setosa \n# 2          5.7         3.8          1.7         0.3 setosa \n# 3          5.4         3.4          1.7         0.2 setosa \n# 4          5.1         3.3          1.7         0.5 setosa \n# 5          4.8         3.4          1.9         0.2 setosa \n# 6          5.1         3.8          1.9         0.4 setosa \n```\n\n数値の範囲（`a <= x <= b`）の抽出は、[`dplyr::between()`](https://dplyr.tidyverse.org/reference/between.html) を使うこともできる。\n```r\n# dplyr::between()\niris %>%\n  as_tibble() %>%\n  filter(between(Petal.Length, 1.7, 2.5))\n\n# # 論理演算子&\n# iris %>%\n#   as_tibble() %>% \n#   filter(Petal.Length >= 1.7 & Petal.Length <= 2.5)\n\n# # カンマ\n# iris %>%\n#   as_tibble() %>% \n#   filter(Petal.Length >= 1.7, Petal.Length <= 2.5)\n```\n```r:出力\n# # A tibble: 6 × 5\n#   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n# 1          5.4         3.9          1.7         0.4 setosa \n# 2          5.7         3.8          1.7         0.3 setosa \n# 3          5.4         3.4          1.7         0.2 setosa \n# 4          5.1         3.3          1.7         0.5 setosa \n# 5          4.8         3.4          1.9         0.2 setosa \n# 6          5.1         3.8          1.9         0.4 setosa \n```\n\n欠損値の抽出は、`base::is.na()` を使用する。\n```r\niris %>%\n  as_tibble() %>%\n  filter(is.na(Sepal.Length))\n\n# # A tibble: 0 × 5\n#   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#          <dbl>       <dbl>        <dbl>       <dbl> <fct>\n```\n\n### 列の抽出\n列の抽出は、[`dplyr::select()`](https://dplyr.tidyverse.org/reference/select.html) を使用する。\n\n列名を直接指定して列を抽出できる。`\"` は不要。\n```r\niris %>%\n  as_tibble() %>%\n  select(Sepal.Length, Species)\n\n# # A tibble: 150 × 2\n#    Sepal.Length Species\n#           <dbl> <fct>  \n#  1          5.1 setosa \n#  2          4.9 setosa \n#  3          4.7 setosa \n#  4          4.6 setosa \n#  5          5   setosa \n#  6          5.4 setosa \n#  7          4.6 setosa \n#  8          5   setosa \n#  9          4.4 setosa \n# 10          4.9 setosa \n# # … with 140 more rows\n```\n\n列の範囲指定は `:` を使用する\n\n```r\niris %>%\n  as_tibble() %>%\n  select(Sepal.Length:Petal.Width)\n\n# # A tibble: 150 × 4\n#    Sepal.Length Sepal.Width Petal.Length Petal.Width\n#           <dbl>       <dbl>        <dbl>       <dbl>\n#  1          5.1         3.5          1.4         0.2\n#  2          4.9         3            1.4         0.2\n#  3          4.7         3.2          1.3         0.2\n#  4          4.6         3.1          1.5         0.2\n#  5          5           3.6          1.4         0.2\n#  6          5.4         3.9          1.7         0.4\n#  7          4.6         3.4          1.4         0.3\n#  8          5           3.4          1.5         0.2\n#  9          4.4         2.9          1.4         0.2\n# 10          4.9         3.1          1.5         0.1\n# # … with 140 more rows\n```\n\n列の間接指定（除外）は `-` を使用する。\n\n```r\niris %>%\n  as_tibble() %>%\n  select(-Species)\n\n# # A tibble: 150 × 4\n#    Sepal.Length Sepal.Width Petal.Length Petal.Width\n#           <dbl>       <dbl>        <dbl>       <dbl>\n#  1          5.1         3.5          1.4         0.2\n#  2          4.9         3            1.4         0.2\n#  3          4.7         3.2          1.3         0.2\n#  4          4.6         3.1          1.5         0.2\n#  5          5           3.6          1.4         0.2\n#  6          5.4         3.9          1.7         0.4\n#  7          4.6         3.4          1.4         0.3\n#  8          5           3.4          1.5         0.2\n#  9          4.4         2.9          1.4         0.2\n# 10          4.9         3.1          1.5         0.1\n# # … with 140 more rows\n```\n\n変数で列を指定する場合は、[`dplyr::all_of()`](https://tidyselect.r-lib.org/reference/all_of.html) 、または [`dplyr::any_of()`](https://tidyselect.r-lib.org/reference/any_of.html) を使用する。\n\n`dplyr::all_of()` は、存在しない列を指定した場合、エラーを返す。`dplyr::any_of()` は、存在しない列を指定した場合、エラーを返さない。\n\n```r\nfeatures = c(\"Sepal.Length\", \"Species\")\n\n# dplyr::all_of()\niris %>%\n  as_tibble() %>%\n  select(all_of(features))\n\n# dplyr::any_of()\niris %>%\n  as_tibble() %>%\n  select(any_of(features))\n```\n\n```r: 出力\n# # A tibble: 150 × 2\n#    Sepal.Length Species\n#           <dbl> <fct>  \n#  1          5.1 setosa \n#  2          4.9 setosa \n#  3          4.7 setosa \n#  4          4.6 setosa \n#  5          5   setosa \n#  6          5.4 setosa \n#  7          4.6 setosa \n#  8          5   setosa \n#  9          4.4 setosa \n# 10          4.9 setosa \n# # … with 140 more rows\n```\n\nデータ型を指定して列を抽出する場合は、selection helper の [`tidyselect::where()`](https://tidyselect.r-lib.org/reference/where.html) を使用する。\n\nヘルパー関数には `TRUE` または `FALSE` を返す関数のみ指定可能で、数値の列を抽出したい場合は `base::is.numeric()` を使用する。\n\n```r\niris %>%\n  as_tibble() %>%\n  select(where(is.numeric))\n\n# # A tibble: 150 × 4\n#    Sepal.Length Sepal.Width Petal.Length Petal.Width\n#           <dbl>       <dbl>        <dbl>       <dbl>\n#  1          5.1         3.5          1.4         0.2\n#  2          4.9         3            1.4         0.2\n#  3          4.7         3.2          1.3         0.2\n#  4          4.6         3.1          1.5         0.2\n#  5          5           3.6          1.4         0.2\n#  6          5.4         3.9          1.7         0.4\n#  7          4.6         3.4          1.4         0.3\n#  8          5           3.4          1.5         0.2\n#  9          4.4         2.9          1.4         0.2\n# 10          4.9         3.1          1.5         0.1\n# # … with 140 more rows\n```\n\n他の [selection helper](https://tidyselect.r-lib.org/reference/language.html) には、以下のようなものがある。\n- `tidyselect::starts_with()` : 前方一致\n- `tidyselect::ends_with()` : 後方一致\n- `tidyselect::contains()` : 部分一致\n- `tidyselect::matches()` : 正規表現一致\n- `tidyselect::everything()` : 全ての列を抽出（他の selection helper と併用可能）\n- `tidyselect::last_col()` : 最後の列を抽出",
      "body_updated_at": "2023-01-04"
    }
  ]
}